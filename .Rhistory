### TODO: Remove columns using factors to figure out which are 1 dimensional
### Can pick up Age Only, since Year and Flags are numbers?
# nleveler = Vectorize(nlevels)
# which(nleveler(age.sex.df) <= 1)
### gg map
### maps
library(maps)
library(mapdata)
library(maptools)
library(scales)
# Read the CSV into R
age.sex.df = read.csv("sexagedata.csv",header=T)
# Get rid of the unnecessary columns (1 dimensional/no information)
compact.df = age.sex.df[-c(2,3,6)]
# Create a contingency table of Value by area and sex
compact.tab = xtabs(Value~Area+Sex,data=compact.df)
compact.df = as.data.frame(unclass(compact.tab))
# Rename to make it prettier
names(compact.df) = c("Female","Male","Total")
# Get rid of the Row Names ####### CAN PROBABLY BE DONE PRETTIER
#compact.df = data.frame(Area=rownames(compact.df),compact.df,row.names=NULL)
compact.df$percentage = compact.df$Female/compact.df$Total
# doing prop.test on a vector just returns proportions; need to do it individually to get p-values
pt.pvalues = function(v1, v2) {
count = numeric(0)
for (i in 1:length(v1)) {
p.val = prop.test(v1[i],v2[i])$p.value
count = c(count, p.val)
}
count
}
compact.df = cbind(compact.df,p.values = pt.pvalues(compact.df$Female,compact.df$Total))
# Rudimentary colour stuff
#c1 = cut(pt.p, breaks = c(-Inf, 0.001,0.01,0.05,0.1,Inf),labels=c("palegreen4","palegreen3","palegreen2","peachpuff","khaki"))
#compact.df$c1 = as.character(c1)
num.bind = function(v1, low=0, high=1) {
v1[v1 < 0] = 0
v1[v1 > 1] = 1
v1
}
colour.function = function(p.values, v1, midpoint=0.5) {
indices = log10(1.05 - p.values)/log10(1.05)
indices = num.bind(indices) * 0.9
logical.lower = v1 < midpoint
cols = ifelse(v1 < midpoint, rgb(0,1,0,alpha=indices),rgb(1,0,0,alpha=indices))
cols[indices == 0] = rgb(1,1,0,alpha = 0.2)
cols
}
compact.df$c1 = colour.function(compact.df$p.values,compact.df$percentage)
# Map time!
# takes a zip location, finds the only relevant shape file and sends it back
# FOR REGIONAL - DEFUNCT
read.shape.from.zip = function(area.zip) {
temp.zip = tempfile()
dir.create(temp.zip)
unzip(area.zip,exdir=temp.zip)
files = list.files(temp.zip)
file = files[grep("^AU_TA.+shp$",files)]
shp = readShapePoly(paste(temp.zip,file,sep="/"))
unlink(temp.zip)
list(shp)
}
# creates a list of all shape files from the zips provided to the above function
read.shapes = function() {
shape.l = list()
areas = row.names(compact.df)
areas = gsub(" Region","",areas)
areas = gsub("[-]","_",areas)
areas = gsub("[']","",areas)
area.files = paste("GIS/",areas,"_L2_2006_NZMG_ArcShp.zip",sep="")
for (af in area.files) {
print(af)
shps = read.shapes.from.zip(af)
shape.l = c(shape.l,shps)
}
shape.l
}
read.shapes.from.zip = function(area.zip) {
temp.zip = tempfile()
dir.create(temp.zip)
unzip(area.zip,exdir=temp.zip)
orig.files = list.files(temp.zip)
s.files = orig.files[grep("^AU_TA.+shp$",orig.files)]
s.files = paste(temp.zip,s.files,sep="/")
shp.list = list()
for (f in s.files) {
#print(paste("+ ",f))
shp = readShapePoly(f)
shp.list = c(shp.list,shp)
}
unlink(temp.zip)
list(shp.list)
}
plot.regions = function(shape.l,colours) {
for (i in 1:length(shape.l)) {
inner.shapes = shape.l[[i]]
for(j in 1:length(inner.shapes)) {
plot(inner.shapes[[j]],add=TRUE,col=colours[i],border=FALSE)
}
}
}
#map('nzHires')#,xlim=c(166,179),ylim=c(-48,-34))
#taranaki = readShapePoly("GIS/AU_RC_Taranaki_RC.shp")
#plot(taranaki, add=TRUE,
#     col="darkgreen",
#     border=FALSE)  #plot the species range
# Plot NZ region map
NZ.region = readShapePoly("GIS/nz/TA06_LV2_V2.shp")
shapeList = read.shapes()
pdf("colour.pdf")
plot(NZ.region,xlim=c(2059004,3003022),
ylim=c(5301970,6766245))
plot.regions(shapeList,compact.df$c1)
legend(x=2100000,y=6666245,c("More Females","More Males","No Difference"),cex=.8,
col=c("red","green","yellow"),pch=c(15))
dev.off()
### TODO: Remove columns using factors to figure out which are 1 dimensional
### Can pick up Age Only, since Year and Flags are numbers?
# nleveler = Vectorize(nlevels)
# which(nleveler(age.sex.df) <= 1)
### gg map
### maps
library(maps)
library(mapdata)
library(maptools)
library(scales)
# Read the CSV into R
age.sex.df = read.csv("sexagedata.csv",header=T)
# Get rid of the unnecessary columns (1 dimensional/no information)
compact.df = age.sex.df[-c(2,3,6)]
# Create a contingency table of Value by area and sex
compact.tab = xtabs(Value~Area+Sex,data=compact.df)
compact.df = as.data.frame(unclass(compact.tab))
# Rename to make it prettier
names(compact.df) = c("Female","Male","Total")
# Get rid of the Row Names ####### CAN PROBABLY BE DONE PRETTIER
#compact.df = data.frame(Area=rownames(compact.df),compact.df,row.names=NULL)
compact.df$percentage = compact.df$Female/compact.df$Total
# doing prop.test on a vector just returns proportions; need to do it individually to get p-values
pt.pvalues = function(v1, v2) {
count = numeric(0)
for (i in 1:length(v1)) {
p.val = prop.test(v1[i],v2[i])$p.value
count = c(count, p.val)
}
count
}
compact.df = cbind(compact.df,p.values = pt.pvalues(compact.df$Female,compact.df$Total))
# Rudimentary colour stuff
#c1 = cut(pt.p, breaks = c(-Inf, 0.001,0.01,0.05,0.1,Inf),labels=c("palegreen4","palegreen3","palegreen2","peachpuff","khaki"))
#compact.df$c1 = as.character(c1)
num.bind = function(v1, low=0, high=1) {
v1[v1 < 0] = 0
v1[v1 > 1] = 1
v1
}
colour.function = function(p.values, v1, midpoint=0.5) {
indices = log10(1.05 - p.values)/log10(1.05)
indices = num.bind(indices) * 0.9
logical.lower = v1 < midpoint
cols = ifelse(v1 < midpoint, rgb(0,1,0,alpha=indices),rgb(1,0,0,alpha=indices))
cols[indices == 0] = rgb(1,1,0,alpha = 0.2)
cols
}
compact.df$c1 = colour.function(compact.df$p.values,compact.df$percentage)
# Map time!
# takes a zip location, finds the only relevant shape file and sends it back
# FOR REGIONAL - DEFUNCT
read.shape.from.zip = function(area.zip) {
temp.zip = tempfile()
dir.create(temp.zip)
unzip(area.zip,exdir=temp.zip)
files = list.files(temp.zip)
file = files[grep("^AU_TA.+shp$",files)]
shp = readShapePoly(paste(temp.zip,file,sep="/"))
unlink(temp.zip)
list(shp)
}
# creates a list of all shape files from the zips provided to the above function
read.shapes = function() {
shape.l = list()
areas = row.names(compact.df)
areas = gsub(" Region","",areas)
areas = gsub("[-]","_",areas)
areas = gsub("[']","",areas)
area.files = paste("GIS/",areas,"_L2_2006_NZMG_ArcShp.zip",sep="")
for (af in area.files) {
print(af)
shps = read.shapes.from.zip(af)
shape.l = c(shape.l,shps)
}
shape.l
}
read.shapes.from.zip = function(area.zip) {
temp.zip = tempfile()
dir.create(temp.zip)
unzip(area.zip,exdir=temp.zip)
orig.files = list.files(temp.zip)
s.files = orig.files[grep("^AU_TA.+shp$",orig.files)]
s.files = paste(temp.zip,s.files,sep="/")
shp.list = list()
for (f in s.files) {
#print(paste("+ ",f))
shp = readShapePoly(f)
shp.list = c(shp.list,shp)
}
unlink(temp.zip)
list(shp.list)
}
plot.regions = function(shape.l,colours) {
for (i in 1:length(shape.l)) {
inner.shapes = shape.l[[i]]
for(j in 1:length(inner.shapes)) {
plot(inner.shapes[[j]],add=TRUE,col=colours[i],border=FALSE)
}
}
}
#map('nzHires')#,xlim=c(166,179),ylim=c(-48,-34))
#taranaki = readShapePoly("GIS/AU_RC_Taranaki_RC.shp")
#plot(taranaki, add=TRUE,
#     col="darkgreen",
#     border=FALSE)  #plot the species range
# Plot NZ region map
NZ.region = readShapePoly("GIS/nz/TA06_LV2_V2.shp")
shapeList = read.shapes()
#pdf("colour.pdf")
plot(NZ.region,xlim=c(2059004,3003022),
ylim=c(5301970,6766245))
plot.regions(shapeList,compact.df$c1)
legend(x=2100000,y=6666245,c("More Females","More Males","No Difference"),cex=.8,
col=c("red","green","yellow"),pch=c(15))
#dev.off()
compact.df
age.sex.df
da = age.sex.df
da = lapply(da, factor)
da
nleveler = Vectorize(nlevels)
which(nleveler(age.sex.df) <= 1)
nlevels(age.sex.df)
nlevels(age.sex.df[1])
nlevels(age.sex.df[2])
nlevels(age.sex.df[3])
nlevels(age.sex.df[,3])
nlevels(age.sex.df[,2])
which(nleveler(da) <= 1)
source("Studentship.R")
source("Studentship.R")
remove.1D.rows = function(data) {
factored.data = lapply(data, factor)
nleveler = Vectorize(nlevels)
data[which(nleveler(da) <= 1)]
}
remove.1D.rows(age.sex.df)
source("Studentship.R")
xtabs(compact.df)
compact.df
compact.df = remove.1D.rows(age.sex.df)
compact.df
compact.tab
age.sex.df
compact.df
compact.tab
compact.tab = xtabs(Value~Sex+Area,data=compact.df)
compact.tab
da
source("Studentship.R"
)
source("Studentship.R")
cor.test(compact.df)
cor(compact.df)
cor(compact.df$Female,compact.df$Male)
?list.files
?list.files
list.files("GIS"
)
source("Studentship.R")
source("Studentship.R")
source("Studentship.R")
create.zip.list()
?list.files
list.files(.)
list.files(".")
create.zip.list("GIS/Regions")
cbind(create.zip.list("GIS/Regions"),row.names(compact.df))
create.zip.list("GIS/Regions/")
create.zip.list("GIS/Regions")
create.zip.list("GIS/Regions")
create.zip.list("GIS/Regions")
# Add a column for the percentage of females by total
compact.df$percentage = compact.df$Female/compact.df$Total
# Perform a Proportion test on all the 
# doing prop.test on a vector just returns proportions; need to do it individually to get p-values
pt.pvalues = function(v1, v2) {
  count = numeric(0)
  for (i in 1:length(v1)) {
    p.val = prop.test(v1[i],v2[i])$p.value
    count = c(count, p.val)
  }
  count
}
compact.df = cbind(compact.df,p.values = pt.pvalues(compact.df$Female,compact.df$Total))

source("Studentship.R")
source("Studentship.R")
areas = row.names(compact.df)
areas = gsub(" Region","",areas)
areas = gsub("[-]","_",areas)
areas = gsub("[']","",areas)
a.files = paste("GIS/Regions/",areas,"_L2_2006_NZMG_ArcShp.zip",sep="")
b.files = create.zip.list("GIS/Regions/")
cbind(a.files,b.files)
list.files("./GIS")
list.files(".//GIS")
q()
rm(list=ls())
ls()
q()
source("Studentship.R")
source("Studentship.R")
rm(list=ls())
q()
source("Studentship.R")
source("Studentship.R")
source("Studentship.R")
source("Studentship.R")
q()
